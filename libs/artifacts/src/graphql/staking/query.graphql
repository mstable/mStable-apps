# import './fragments.graphql'

query Staking {
  stakedTokens {
    id
    stakingToken {
      ...TokenAll
    }
  }
  # TODO consider quests moving to another query
  quests {
    id
  }
}

query StakedToken($id: ID!, $account: Bytes!, $hasAccount: Boolean!) {
  stakedToken(id: $id) {
    id
    token {
      ...TokenAll
    }
    stakingToken {
      ...TokenAll
    }
    stakingRewards {
      DURATION
      periodFinish
      lastUpdateTime
      rewardRate
      rewardPerTokenStored
      rewardsToken {
        ...TokenAll
      }
      rewardsTokenVendor
      rewardsDistributor
      pendingAdditionalReward
    }
    questMaster
    UNSTAKE_WINDOW
    COOLDOWN_SECONDS
    collateralisationRatio
    slashingPercentage
    season {
      id
      endedAt
      startedAt
      seasonNumber
    }
    accounts(where: { address: $account }) @include(if: $hasAccount) {
      id
      delegatee {
        id
      }
      rewardPerTokenPaid
      rewards
      delegators {
        id
      }
      completedQuests {
        id
      }
      cooldownTimestamp
      cooldownPercentage
      balance {
        lastAction
        permMultiplier
        timeMultiplier
        seasonMultiplier
        raw
        votes
        weightedTimestamp
        rawBD @client
        votesBD @client
      }
    }
  }
}
